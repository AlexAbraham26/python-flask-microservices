name: Frontend CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      # Checks out the repository code to the runner

    - name: Set Up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
      # Sets up Python 3.9 environment

    - name: Install Dependencies
      run: |
        cd frontend
        pip install -r requirements.txt
      # Installs Python dependencies from the requirements.txt file

    - name: Verify pytest Installation
      run: |
        cd frontend
        pip show pytest
      # Verifies that pytest is installed

    - name: List Installed Packages
      run: |
        cd frontend
        pip freeze
      # Lists installed packages to verify that all dependencies are installed

    - name: Run Tests
      run: |
        cd frontend
        pytest
      # Runs the test suite using pytest

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
      # Installs the jq tool for parsing JSON

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        auth-type: 'SERVICE_PRINCIPAL'
      # Logs in to Azure using the service principal credentials

    - name: Prepare Environment Variables
      run: |
        echo "Raw AZURE_CREDENTIALS JSON:"
        echo "${{ secrets.AZURE_CREDENTIALS }}"

        echo "Parsed AZURE_CREDENTIALS JSON:"
        echo "${{ secrets.AZURE_CREDENTIALS }}" | jq '.'

        echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" >> $GITHUB_ENV
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      # Parses AZURE_CREDENTIALS JSON and sets environment variables for Terraform

    - name: Set Up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
      # Sets up Terraform

    - name: Terraform Init
      run: |
        cd terraform
        terraform init
      # Initializes Terraform

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan
      env:
        ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
      # Creates an execution plan

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
      # Applies the Terraform configuration

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # Sets up Docker Buildx to support multi-platform builds

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      # Logs in to Docker Hub using the Docker credentials 

    - name: Build and Push Docker Image to Docker Hub
      run: |
        cd frontend
        docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest --push .
      # Builds the Docker image and pushes it to Docker Hub

    - name: Log in to ACR
      run: |
        az acr login --name frontendACR
      # Logs in to Azure Container Registry (ACR)

    - name: Build and Push Docker Image to ACR
      run: |
        cd frontend
        docker buildx build --platform linux/amd64,linux/arm64 -t frontendACR.azurecr.io/frontend:latest --push .
      # Builds the Docker image and pushes it to ACR
