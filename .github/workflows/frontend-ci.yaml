name: Frontend CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      # Checks out the repository code to the runner

    - name: Set Up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
      # Sets up Python 3.9 environment

    - name: Install Dependencies
      run: |
        cd frontend
        pip install -r requirements.txt
      # Installs Python dependencies from the requirements.txt file

    - name: Verify pytest Installation
      run: |
        cd frontend
        pip show pytest
      # Verifies that pytest is installed

    - name: List Installed Packages
      run: |
        cd frontend
        pip freeze
      # Lists installed packages to verify that all dependencies are installed

    - name: Run Tests
      run: |
        cd frontend
        pytest
      # Runs the test suite using pytest

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        auth-type: 'SERVICE_PRINCIPAL'
      # Logs in to Azure using the service principal credentials

    - name: Set Up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # Sets up Docker Buildx to support multi-platform builds

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      # Logs in to Docker Hub using the Docker credentials 

    - name: Build and Push Docker Image to Docker Hub with SHA and Latest Tags
      run: |
        cd frontend
        docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }} --push .
        docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest --push .
      # Builds the Docker image and pushes it to Docker Hub with both SHA and latest tags

    - name: Log in to ACR
      run: echo ${{ secrets.ACR_PASSWORD }} | docker login frontendACR.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin
      # Logs in to Azure Container Registry (ACR)

    - name: Build and Push Docker Image to ACR with SHA and Latest Tags
      run: |
        cd frontend
        docker buildx build --platform linux/amd64,linux/arm64 -t frontendACR.azurecr.io/frontend:${{ github.sha }} --push .
        docker buildx build --platform linux/amd64,linux/arm64 -t frontendACR.azurecr.io/frontend:latest --push .
       # Builds the Docker image and pushes it to ACR with both SHA and latest tags

    - name: Set Up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
      # Sets up kubectl to interact with the AKS cluster

    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group frontend-rg --name frontend-aks
      # Retrieves the AKS credentials to allow kubectl to interact with the cluster
    
    - name: Update Deployment YAML with the correct image tag
      run: |
        sed -i "s|frontendACR.azurecr.io/frontend:latest|frontendACR.azurecr.io/frontend:${{ github.sha }}|g" k8s-specifications/frontend-deployment.yaml
      # Updates the deployment YAML with the correct SHA tag
   
    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s-specifications/frontend-deployment.yaml
        kubectl apply -f k8s-specifications/frontend-service.yaml
      # Deploys the application to the AKS cluster using the Kubernetes manifests